{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["import axios from 'axios';\nimport { defineStore } from \"pinia\";\nimport { auth } from \"../../firebaseConfig\";\nimport { createUserWithEmailAndPassword, \n\t\tsignInWithEmailAndPassword,\n\t\tonAuthStateChanged,\n\t\tsignOut} from \"firebase/auth\";\nimport router from \"../router\";\nexport const useUserStore = defineStore(\"user\", {\n  state: () => ({\n      userData: \"bluuweb\",\n      userInfo: {},\n      loadingUser: false,\n      loading: true,\n      loadingSession: false\n  }),\n  getters: {\n    minuscula(state) {\n      return state.userData.toLowerCase();\n    },\n    mayusculaInicial(state) {\n      return state.userData.replace(/\\b\\w/g, (match) => match.toUpperCase())\n    },\n    mayuscula(state) {\n      return state.userData.toUpperCase();\n    }\n  }, \n  actions: {\n    registro(name) {\n      this.userData = name;\n    },\n    \n    async registerUser(email, password) {\n      this.loadingUser = true;\n      try {\n        const { user } = await createUserWithEmailAndPassword(\n          auth,\n          email,\n          password\n        );\n        // console.log(user);\n        this.userInfo = { email: user.email, uid: user.uid }\n        this.loading = false;\n        router.push(\"/\");\n      } catch (e) {\n        console.log(e);\n        this.userInfo = {};\n      } finally {\n        this.loadingUser = false;\n      }\n    },\n\n    async loginUser(email, password) {\n      this.loadingUser = true;\n      try {\n        const { user } = await signInWithEmailAndPassword(\n          auth,\n          email,\n          password\n        );\n        // console.log(user);\n        this.userInfo = {\n          email: user.email,\n          uid: user.uid\n        };\n        this.loading = false;\n        router.push(\"/\");\n      } catch(e) {\n        // statements\n        console.log(e);\n        this.userInfo = {};\n      } finally {\n        this.loadingUser = false;\n      }\n    },\n\n    async signOutUser() {\n      this.loadingUser = true;\n      try {\n        await auth.signOut();\n        this.userInfo = {};\n        this.loading = true;\n        router.push(\"/login\");\n      } catch(e) {\n        // statements\n        console.log(e);\n      } finally {\n        // statements\n        this.loadingUser = false;\n      }\n    },\n\n    currentUser() {\n      return new Promise((resolve, reject) => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n          if (user) {\n            this.userInfo = {\n              email: user.email,\n              uid: user.uid\n            };\n          } else {\n            this.userInfo = {};\n          }\n          resolve(user);\n        }, (error) => {\n          console.error('Error en onAuthStateChanged:', error);\n          reject(error);\n        });\n\n        // Dependiendo de tus necesidades, puedes o no querer desuscribirte inmediatamente.\n        // Si lo haces, solo recibirás el primer cambio y luego dejarás de escuchar.\n        // Si no lo haces, seguirás escuchando cambios hasta que el componente sea destruido o hasta que desactives manualmente el listener.\n        // unsubscribe();\n      });\n    }\n  }\n});"],"file":"bundle.js"}